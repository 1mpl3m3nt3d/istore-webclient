daemon off;

# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;
  gzip_proxied any; # Heroku router sends Via header

  server_tokens off;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
  access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
  error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  # Must read the body in 5 seconds.
  client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  upstream app_server {
    server unix:/tmp/nginx.socket fail_timeout=0;
  }

  server {
    listen <%= ENV["PORT"] %>;
    listen [::]:<%= ENV["PORT"] %>;
    server_name _;
    keepalive_timeout 5;
    client_max_body_size <%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;

    location / {
      # Force SSL / redirect http -> https
      if ($http_x_forwarded_proto != "https") {
        return 301 https://$host$request_uri;
      }

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade-Insecure-Requests 1;

      # proxy_set_header Access-Control-Allow-Origin '*';
      # proxy_set_header Access-Control-Allow-Headers 'Accept, Content-Type, Origin, X-Requested-With';
      # proxy_set_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, PATCH, DELETE';

      proxy_pass http://app_server; # Server listens here and receives nginx requests

      proxy_redirect off;

      proxy_buffers 8 512k;
      proxy_buffer_size 512k;
    }

    location /basket/swagger {
      return 301 <%= ENV["REACT_APP_BASKET_API_URL"] %>/swagger;
    }

    location /catalog/swagger {
      return 301 <%= ENV["REACT_APP_CATALOG_API_URL"] %>/swagger;
    }

    location /identity {
      return 301 <%= ENV["REACT_APP_IDENTITY_URL"] %>;
    }
  }
}
