daemon off;

# heroku dynos have at least 4 cores, nginx default = 1
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

#user nobody
worker_rlimit_nofile 8192;
pid logs/nginx/nginx.pid;

#error_log logs/nginx/error.log;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {

  # leading slash means that the reference is starting
  # from the root directory (absolute reference) vs
  # the current location (relative reference)

  include conf/mime.types;

  #include /etc/nginx/proxy.conf;
  #include /etc/nginx/fastcgi.conf;

  #index index.html index.htm index.php;

  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;
  gzip_proxied any; # heroku router sends Via header

  server_tokens off;

  default_type application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

  #log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';

  access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> main;
  #access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;

  error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;

  sendfile on;
  tcp_nopush on;

  # this seems to be required for some vhosts
  server_names_hash_bucket_size 128;

  # must read the body in 5 seconds
  client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  upstream app_server {
    server unix:/tmp/nginx.socket fail_timeout=0; #host.docker.internal:5001 weight=1 fail_timeout=0;
  }

  server {
    listen <%= ENV["PORT"] %>;
    listen [::]:<%= ENV["PORT"] %>;

    server_name _;

    keepalive_timeout 5;
    client_max_body_size <%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;
    client_body_buffer_size 256k;

    location / {
      # force SSL / redirect http -> https
      if ($http_x_forwarded_proto != "https") {
        return 301 https://$host$request_uri;
      }

      proxy_pass http://app_server; # server listens here and receives nginx requests

      proxy_redirect off;

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Upgrade-Insecure-Requests 1;

      #proxy_set_header Access-Control-Allow-Origin '*';
      #proxy_set_header Access-Control-Allow-Headers 'Accept, Content-Type, Origin, X-Requested-With';
      #proxy_set_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, PATCH, DELETE';

      proxy_connect_timeout 90;
      proxy_send_timeout 90;
      proxy_read_timeout 90;

      proxy_buffers 32 512k;
      proxy_buffer_size 512k;
    }

    location /basket/swagger {
      return 301 <%= ENV["REACT_APP_BASKET_API_URL"] || http://host.docker.internal:5003 %>/swagger;
    }

    location /catalog/swagger {
      return 301 <%= ENV["REACT_APP_CATALOG_API_URL"] || http://host.docker.internal:5000 %>/swagger;
    }

    location /identity {
      return 301 <%= ENV["REACT_APP_IDENTITY_URL"] || http://host.docker.internal:5002 %>;
    }

    #location /pgadmin {
    #  return 301 <%= ENV["REACT_APP_PGADMIN_URL"] || http://host.docker.internal:8001 %>/login;
    #}

    #location /catalog/swagger {
    #  return 301 http://host.docker.internal:5000/swagger;
    #}

    #location /basket/swagger {
    #  return 301 http://host.docker.internal:5003/swagger;
    #}

    #location /identity {
    #  return 301 http://host.docker.internal:5002;
    #}

    #location /pgadmin {
    #  return 301 http://host.docker.internal:8001/login;
    #}

    #location /assets/images {
    #  alias /var/www/assets/images;
    #}
  }

  #server { # php/fastcgi
  #  listen 80;
  #  server_name domain1.com www.domain1.com;
  #  access_log logs/domain1.access.log main;
  #  root html;
  #
  #  location ~ \.php$ {
  #    fastcgi_pass 127.0.0.1:1025;
  #  }
  #}

  #server { # simple reverse-proxy
  #  listen 80;
  #  server_name domain2.com www.domain2.com;
  #  access_log logs/domain2.access.log main;
  #
  #  # serve static files
  #  location ~ ^/(images|javascript|js|css|flash|media|static)/ {
  #    root /var/www/virtual/big.server.com/htdocs;
  #    expires 30d;
  #  }
  #
  #  # pass requests for dynamic content to rails/turbogears/zope, et al
  #  location / {
  #    proxy_pass http://127.0.0.1:8080;
  #  }
  #}

  #upstream big_server_com {
  #  server 127.0.0.3:8000 weight=5;
  #  server 127.0.0.3:8001 weight=5;
  #  server 192.168.0.1:8000;
  #  server 192.168.0.1:8001;
  #}

  #server { # simple load balancing
  #  listen 80;
  #  server_name big.server.com;
  #  access_log logs/big.server.access.log main;
  #
  #  location / {
  #    proxy_pass http://big_server_com;
  #  }
  #}
}
